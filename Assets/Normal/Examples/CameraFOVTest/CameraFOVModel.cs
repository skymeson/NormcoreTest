using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class CameraFOVModel
{
    [RealtimeProperty(1, true, true)]
    private float _cameraFOV = 42.0f;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class CameraFOVModel : IModel {
    // Properties
    public float cameraFOV {
        get { return _cache.LookForValueInCache(_cameraFOV, entry => entry.cameraFOVSet, entry => entry.cameraFOV); }
        set { if (value == cameraFOV) return; _cache.UpdateLocalCache(entry => { entry.cameraFOVSet = true; entry.cameraFOV = value; return entry; }); FireCameraFOVDidChange(value); }
    }
    
    // Events
    public delegate void CameraFOVDidChange(CameraFOVModel model, float value);
    public event         CameraFOVDidChange cameraFOVDidChange;
    
    // Delta updates
    private struct LocalCacheEntry {
        public bool  cameraFOVSet;
        public float cameraFOV;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache;
    
    public CameraFOVModel() {
        _cache = new LocalChangeCache<LocalCacheEntry>();
    }
    
    // Events
    public void FireCameraFOVDidChange(float value) {
        try {
            if (cameraFOVDidChange != null)
                cameraFOVDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    
    // Serialization
    enum PropertyID {
        CameraFOV = 1,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Mark unreliable properties as clean and flatten the in-flight cache.
            // TODO: Move this out of WriteLength() once we have a prepareToWrite method.
            _cameraFOV = cameraFOV;
            _cache.Clear();
            
            // Write all properties
            length += WriteStream.WriteFloatLength((uint)PropertyID.CameraFOV);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.cameraFOVSet)
                    length += WriteStream.WriteFloatLength((uint)PropertyID.CameraFOV);
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteFloat((uint)PropertyID.CameraFOV, _cameraFOV);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.cameraFOVSet)
                    _cache.PushLocalCacheToInflight(context.updateID);
                
                if (entry.cameraFOVSet)
                    stream.WriteFloat((uint)PropertyID.CameraFOV, entry.cameraFOV);
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        bool cameraFOVExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.cameraFOVSet);
        
        // Remove from in-flight
        if (context.deltaUpdatesOnly && context.reliableChannel)
            _cache.RemoveUpdateFromInflight(context.updateID);
        
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.CameraFOV: {
                    float previousValue = _cameraFOV;
                    
                    _cameraFOV = stream.ReadFloat();
                    
                    if (!cameraFOVExistsInChangeCache && _cameraFOV != previousValue)
                        FireCameraFOVDidChange(_cameraFOV);
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
